[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Jianing/index.html",
    "href": "posts/Jianing/index.html",
    "title": "Homework 0",
    "section": "",
    "text": "In this blog, I will be explaining how to construct interesting data visualizations of the Palmer Penguins dataset using Python."
  },
  {
    "objectID": "posts/Jianing/index.html#introduction",
    "href": "posts/Jianing/index.html#introduction",
    "title": "Homework 0",
    "section": "",
    "text": "In this blog, I will be explaining how to construct interesting data visualizations of the Palmer Penguins dataset using Python."
  },
  {
    "objectID": "posts/Jianing/index.html#create-a-database",
    "href": "posts/Jianing/index.html#create-a-database",
    "title": "Homework 0",
    "section": "1. Create a Database",
    "text": "1. Create a Database\nFirst, create a database with three tables: temperatures, stations, and countries.\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns #seaborn library for data visualiazation \n\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\npenguins.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN"
  },
  {
    "objectID": "posts/Jianing/index.html#bar-chart",
    "href": "posts/Jianing/index.html#bar-chart",
    "title": "Homework 0",
    "section": "Bar Chart",
    "text": "Bar Chart\nIn order to create data visualizations, we should first explore the dataset and understand the variables included as well as their relationship. For instance, I have noticed there are different categories of penguins and decided to investigate the distribution of penguins with bar chart.\n\n#countplot function is used for showing the counts of observations in each categorical bin using bars\nsns.countplot(x = 'Species', data = penguins)\nplt.title('Distribution of Penguin Species')\nplt.show()\n\n\n\n\n\n\n\n\nFrom the bar chart, we can observe that Adelie has the greatest amount in the sample while Chinstrap has the least amount. However, this is not interesting. We could create more meaningful plots through the quantitative variables of each group."
  },
  {
    "objectID": "posts/Jianing/index.html#scatterplot",
    "href": "posts/Jianing/index.html#scatterplot",
    "title": "Homework 0",
    "section": "Scatterplot",
    "text": "Scatterplot\nAs flipper length and body mass are both important components for a penguine, I am interested in whether there is any relationship between these two variables. To find such pattern between two quantitative variables, scatterplot is an useful tool.\n\n#sns.scatterplot is a function from the Seaborn library in Python, used for creating scatterplots\nsns.scatterplot(x='Flipper Length (mm)', y='Body Mass (g)', hue='Species', data=penguins)\nplt.title('Flipper Length vs Body Mass by Species')\nplt.show()\n\n\n\n\n\n\n\n\nFrom the graph, we can oberve that there exists a positive correlations between flipper length and body mass in all three species, while the correlation strength could be explored further."
  },
  {
    "objectID": "posts/Jianing/index.html#histogram",
    "href": "posts/Jianing/index.html#histogram",
    "title": "Homework 0",
    "section": "Histogram",
    "text": "Histogram\nA histogram could also be used to represent the distribution of a numerical dataset, especially when we want to compare distribution of a variable across different groups. From the above scatterplot, We can see that both flipper length and body mass vary across different groups such that we can use histogram to find the distribution.\n\nplt.figure(figsize=(14, 6))\nplt.subplot(1, 2, 1) \n#sns.histplot is a function from the Seaborn library used to create histograms. \nsns.histplot(data=penguins, x='Body Mass (g)', hue='Species', element='step', palette='Set2')\nplt.title('Histogram of Body Mass (g) by Species')\nplt.ylabel('Frequency') \nplt.show()\n\n\n\n\n\n\n\n\nFrom the histogram of body mass(g) by species, we can observe that Gentoo has greater body mass than Adelie and Chinstrap in general\n\nplt.figure(figsize=(14, 6))\nplt.subplot(1, 2, 1) \n#sns.histplot is a function from the Seaborn library used to create histograms. \nsns.histplot(data=penguins, x='Flipper Length (mm)', hue='Species', element='step', palette='Set2')\nplt.title('Histogram of Flipper Length (mm) by Species')\nplt.ylabel('Frequency') \nplt.show()\n\n\n\n\n\n\n\n\nFrom the histogram of flipper length (mm) by species, we can observe that Gentoo has greater flipper length than Adelie and Chinstrap in general as well."
  },
  {
    "objectID": "posts/Jianing/index.html#boxplot",
    "href": "posts/Jianing/index.html#boxplot",
    "title": "Homework 0",
    "section": "Boxplot",
    "text": "Boxplot\nIn addition, we can also understand the distribution of data through boxplot, which is a standardized way of displaying the distribution based on a five-number summary: minimum, first quartile (Q1), median, third quartile (Q3), and maximum. For instance, we can investigate the culmen length of each group through box plot.\n\nplt.figure(figsize=(6, 6))\n#sns.boxplot is a function in the Seaborn library used to create boxplots. \nsns.boxplot(x='Species', y='Culmen Length (mm)', data=penguins, palette='Set1')\nplt.title('Boxplot of Culmen Length (mm) by Species')\nplt.show()\n\n\n\n\n\n\n\n\nFrom the boxplot, we can observe that Chinstrap has the greatest median among three species such that we could conclude that Chinstrap has the greatest culmen length compared to the other two species. Meanwhile, Adelie has the least median such that it has the least culmen length overall."
  },
  {
    "objectID": "posts/Jianing/index.html#conclusion",
    "href": "posts/Jianing/index.html#conclusion",
    "title": "Homework 0",
    "section": "Conclusion",
    "text": "Conclusion\nIn this tutorial, we explored various ways to visualize the Palmer Penguins dataset. By employing different types of plots, we gained valuable insights into the data. Remember, the key to effective data visualization lies in choosing the right type of plot that best represents the data’s story!"
  },
  {
    "objectID": "posts/Jianing_1/index.html",
    "href": "posts/Jianing_1/index.html",
    "title": "Homework 1",
    "section": "",
    "text": "In this blog, I will be explaining how to construct interesting data visualizations through SQL."
  },
  {
    "objectID": "posts/Jianing_1/index.html#introduction",
    "href": "posts/Jianing_1/index.html#introduction",
    "title": "Homework 1",
    "section": "",
    "text": "In this blog, I will be explaining how to construct interesting data visualizations through SQL."
  },
  {
    "objectID": "posts/Jianing_1/index.html#create-a-database",
    "href": "posts/Jianing_1/index.html#create-a-database",
    "title": "Homework 1",
    "section": "1. Create a Database",
    "text": "1. Create a Database\nFirst, create a database with three tables: temperatures, stations, and countries.\n\nimport pandas as pd\nimport sqlite3\n\n# Load the data files\ntemps_df = pd.read_csv('temps.csv')\nstations_df = pd.read_csv('station-metadata.csv')\ncountries_df = pd.read_csv('country-codes.csv')\n\n# Create a SQLite database\nconn = sqlite3.connect('temps.db')\n\ndef prepare_df(df):\n    return df\n\n# temperatures table \ndf_iter = pd.read_csv('temps.csv', chunksize=100000)\nfor i, df in enumerate(df_iter):\n    df = prepare_df(df)\n    df.to_sql(\"temperatures\", conn, if_exists=\"replace\" if i == 0 else \"append\", index=False)\n\n# stations table\nstations_df = prepare_df(stations_df)\nstations_df.to_sql(\"stations\", conn, if_exists=\"replace\", index=False)\n\n# countries table\ncountries_df = prepare_df(countries_df)\ncountries_df.to_sql(\"countries\", conn, if_exists=\"replace\", index=False)\n\ncursor = conn.cursor()\ncursor.execute(\"SELECT name FROM sqlite_master WHERE type='table'\")\ntables_created = cursor.fetchall()\n\n# Close the database connection\nconn.close()"
  },
  {
    "objectID": "posts/Jianing_1/index.html#write-a-query-function",
    "href": "posts/Jianing_1/index.html#write-a-query-function",
    "title": "Homework 1",
    "section": "2. Write a Query Function",
    "text": "2. Write a Query Function\nI use SQL Query to extract Pandas dataframe of temperature readings for the specified country, in the specified date range, in the specified month of the year.\n\nfrom climate_database import query_climate_database\nimport inspect\n\n# Print the source code of the function\nprint(inspect.getsource(query_climate_database))\n\ndf = query_climate_database(db_file = \"temps.db\",\n                            country = \"India\", \n                            year_begin = 1980, \n                            year_end = 2020,\n                            month = 1)\n\nprint(df)\n\ndef query_climate_database(db_file, country, year_begin, year_end, month):\n    \n    # Open a new connection to the specified database file\n    conn = sqlite3.connect(db_file)\n    \n    # SQL command\n    cmd = f\"\"\"\n    SELECT \n        S.NAME, \n        S.LATITUDE, \n        S.LONGITUDE, \n        C.NAME as Country, \n        T.Year, \n        T.Month, \n        T.Temp\n    FROM \n        stations S\n    INNER JOIN \n        temperatures T ON T.ID = S.ID\n    INNER JOIN \n        countries C ON S.ID LIKE C.'FIPS 10-4' || '%'\n    WHERE \n        C.NAME = ? AND \n        T.Year BETWEEN ? AND ? AND \n        T.Month = ? AND\n        T.Temp IS NOT NULL\n    \"\"\"\n    \n    # Execute the query and store the results in a pandas DataFrame\n    df = pd.read_sql_query(cmd, conn, params=(country, year_begin, year_end, month))\n    \n    # Close the database connection\n    conn.close()\n    \n    return df\n\n\n\nDatabaseError: Execution failed on sql '\n    SELECT \n        S.NAME, \n        S.LATITUDE, \n        S.LONGITUDE, \n        C.NAME as Country, \n        T.Year, \n        T.Month, \n        T.Temp\n    FROM \n        stations S\n    INNER JOIN \n        temperatures T ON T.ID = S.ID\n    INNER JOIN \n        countries C ON S.ID LIKE C.'FIPS 10-4' || '%'\n    WHERE \n        C.NAME = ? AND \n        T.Year BETWEEN ? AND ? AND \n        T.Month = ? AND\n        T.Temp IS NOT NULL\n    ': no such column: T.Month"
  },
  {
    "objectID": "posts/Jianing_1/index.html#write-a-geographic-scatter-function-for-yearly-temperature-increases",
    "href": "posts/Jianing_1/index.html#write-a-geographic-scatter-function-for-yearly-temperature-increases",
    "title": "Homework 1",
    "section": "3. Write a Geographic Scatter Function for Yearly Temperature Increases",
    "text": "3. Write a Geographic Scatter Function for Yearly Temperature Increases\nIn this part, I will write a function to create visualizations that address the following question: How does the average yearly change in temperature vary within a given country?\n\n\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\n\ndef compute_linear_regression_coefficient(x, y):\n    # Compute the coefficient (slope) of a linear regression model\n    model = LinearRegression()\n    model.fit(x.reshape(-1, 1), y)\n    return model.coef_[0]\n\ndef temperature_coefficient_plot(db_file, country, year_begin, year_end, month, min_obs, **kwargs):\n    # Connect to the database\n    conn = sqlite3.connect(db_file)\n    \n    # Fetch the data\n    df = pd.read_sql_query(\n        f\"\"\"\n        SELECT \n            S.NAME, \n            S.LATITUDE, \n            S.LONGITUDE, \n            T.YEAR, \n            T.VALUE{month} as Temp\n        FROM \n            stations S\n        JOIN \n            temperatures T ON T.ID = S.ID\n        JOIN \n            countries C ON SUBSTR(T.ID, 1, 2) = C.'FIPS 10-4'\n        WHERE \n            C.NAME = ? AND \n            T.YEAR BETWEEN ? AND ? AND \n            T.VALUE{month} IS NOT NULL\n        \"\"\",\n        conn, params=(country, year_begin, year_end))\n\n    # Close the connection\n    conn.close()\n    \n    # Ensure that we only consider stations with at least `min_obs` years of data\n    counts = df.groupby('NAME').size()\n    valid_stations = counts[counts &gt;= min_obs].index\n    df = df[df['NAME'].isin(valid_stations)]\n\n    # Calculate the yearly temperature change coefficient for each station\n    df['Year'] = df['Year'].astype(int)\n    df['Temp'] = df['Temp'].astype(float) / 100  # assuming the temperature is in centi-degrees\n    coef_df = df.groupby('NAME').apply(lambda x: compute_linear_regression_coefficient(x['Year'].values, x['Temp'].values))\n\n    # Prepare the dataframe for plotting\n    plot_df = df[['NAME', 'LATITUDE', 'LONGITUDE']].drop_duplicates()\n    plot_df = plot_df.set_index('NAME').join(coef_df.rename('Temp_Change')).reset_index()\n    \n    # Create the scatter plot\n    fig = px.scatter_mapbox(\n        plot_df,\n        lat=\"LATITUDE\",\n        lon=\"LONGITUDE\",\n        color=\"Temp_Change\",\n        hover_name=\"NAME\",\n        hover_data={\"Temp_Change\": \":.2f\"},\n        center={\"lat\": plot_df['LATITUDE'].mean(), \"lon\": plot_df['LONGITUDE'].mean()},\n        **kwargs\n    )\n\n    # Add colorbar title and center the color at 0\n    fig.update_layout(\n        coloraxis_colorbar=dict(\n            title=\"Yearly Temperature Change(°C/year)\",\n            ticks=\"outside\",\n            tickvals=[coef_df.min(), 0, coef_df.max()],\n            ticktext=[f\"{coef_df.min():.2f}\", \"0\", f\"{coef_df.max():.2f}\"]\n        ),\n        title=f\"Estimate of Yearly Change in Temperature of Stations in {country} in month {month} from {year_begin} to {year_end}\"\n    )\n\n    return fig\n\ncolor_map = px.colors.diverging.RdGy_r  # choose a colormap\n\n\n#India\nfig = temperature_coefficient_plot(\n    db_file=\"temps.db\",\n    country=\"India\",\n    year_begin=1980,\n    year_end=2020,\n    month=1,\n    min_obs=10,\n    zoom=3,\n    mapbox_style=\"carto-positron\",\n    color_continuous_scale=color_map\n)\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n#Belgium \nfig = temperature_coefficient_plot(\n    db_file=\"temps.db\",\n    country=\"Belgium\",\n    year_begin=1980,\n    year_end=2020,\n    month=1,\n    min_obs=10,\n    zoom=5,\n    mapbox_style=\"carto-positron\",\n    color_continuous_scale=color_map\n)\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n#4. Visualization\nimport plotly.express as px\n\ndef query_annual_temp_distribution(db_file, country):\n    conn = sqlite3.connect(db_file)\n    query = \"\"\"\n    SELECT S.NAME, S.LATITUDE, S.LONGITUDE, AVG((T.VALUE1 + T.VALUE2 + T.VALUE3 + T.VALUE4 + T.VALUE5 + T.VALUE6 + T.VALUE7 + T.VALUE8 + T.VALUE9 + T.VALUE10 + T.VALUE11 + T.VALUE12)/12) as AnnualAvgTemp\n    FROM stations S\n    JOIN temperatures T ON T.ID = S.ID\n    JOIN countries C ON SUBSTR(T.ID, 1, 2) = C.'FIPS 10-4'\n    WHERE C.NAME = ?\n    GROUP BY S.NAME, S.LATITUDE, S.LONGITUDE\n    \"\"\"\n    df = pd.read_sql_query(query, conn, params=(country,))\n    conn.close()\n    return df\n\n\ndef visualize_annual_avg_temp(df, country):\n    # Creating a bar chart using Plotly\n    fig = px.bar(df, x='NAME', y='AnnualAvgTemp', title=f'Annual Average Temperature at Each Station in {country}',\n                 labels={'NAME': 'Station Name', 'AnnualAvgTemp': 'Annual Average Temperature (°C)'})\n    \n    # Enhancing the layout\n    fig.update_layout(xaxis_title='Station Name', \n                      yaxis_title='Annual Average Temperature (°C)', \n                      xaxis_tickangle=-45)\n\n    # Show the figure\n    return fig\n\ndb_file = 'temps.db'\ncountry = 'Belgium'\ndf = query_annual_temp_distribution(db_file, country)\nvisualize_annual_avg_temp(df, country)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\ndef visualize_annual_temp_distribution_3d(df, country):\n    fig = px.scatter_3d(df, \n                        x='LATITUDE', \n                        y='LONGITUDE', \n                        z='AnnualAvgTemp', \n                        color='AnnualAvgTemp',\n                        hover_name='NAME',\n                        title=f'3D View of Annual Average Temperature Distribution for {country}')\n    fig.update_layout(coloraxis_colorbar=dict(title=\"Annual Avg Temp (°C)\"))\n    fig.show()\n    \ndf = query_annual_temp_distribution('temps.db', 'India')\nfig = visualize_annual_temp_distribution_3d(df, 'India')\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Homework 1\n\n\n\n\n\n\nPython\n\n\nSQL\n\n\n\n\n\n\n\n\n\nJan 29, 2024\n\n\nJianing Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nHomework 0\n\n\n\n\n\n\nPython\n\n\nData Visualization\n\n\n\n\n\n\n\n\n\nJan 22, 2024\n\n\nJianing Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 19, 2024\n\n\nJianing Zhang\n\n\n\n\n\n\nNo matching items"
  }
]